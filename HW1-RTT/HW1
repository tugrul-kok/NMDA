{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"collapsed_sections":["du8wsKrzMlJk"],"mount_file_id":"1h90WWo2-Tbc40Fo-2fmZtz9op__f6MEq","authorship_tag":"ABX9TyMyW6WICOKlM9hO5c0N4LvJ"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["# **Network Measurement Homework 1**"],"metadata":{"id":"e_OQg0iXMaI9"}},{"cell_type":"markdown","source":["### Installing required packages and importing libraries"],"metadata":{"id":"du8wsKrzMlJk"}},{"cell_type":"code","execution_count":1,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"OyWTvqAqSmGy","executionInfo":{"status":"ok","timestamp":1709501940939,"user_tz":-180,"elapsed":36580,"user":{"displayName":"Tuğrul Kök","userId":"16330606131935583069"}},"outputId":"5b0574ce-c058-411a-d507-94b08885945a"},"outputs":[{"output_type":"stream","name":"stdout","text":["Reading package lists... Done\n","Building dependency tree... Done\n","Reading state information... Done\n","The following NEW packages will be installed:\n","  iputils-ping\n","0 upgraded, 1 newly installed, 0 to remove and 35 not upgraded.\n","Need to get 42.9 kB of archives.\n","After this operation, 116 kB of additional disk space will be used.\n","Get:1 http://archive.ubuntu.com/ubuntu jammy/main amd64 iputils-ping amd64 3:20211215-1 [42.9 kB]\n","Fetched 42.9 kB in 0s (266 kB/s)\n","Selecting previously unselected package iputils-ping.\n","(Reading database ... 121749 files and directories currently installed.)\n","Preparing to unpack .../iputils-ping_3%3a20211215-1_amd64.deb ...\n","Unpacking iputils-ping (3:20211215-1) ...\n","Setting up iputils-ping (3:20211215-1) ...\n","Processing triggers for man-db (2.10.2-1) ...\n","Collecting pythonping\n","  Downloading pythonping-1.1.4-py3-none-any.whl (16 kB)\n","Installing collected packages: pythonping\n","Successfully installed pythonping-1.1.4\n","Requirement already satisfied: numpy in /usr/local/lib/python3.10/dist-packages (1.25.2)\n","Requirement already satisfied: matplotlib in /usr/local/lib/python3.10/dist-packages (3.7.1)\n","Requirement already satisfied: contourpy>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib) (1.2.0)\n","Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.10/dist-packages (from matplotlib) (0.12.1)\n","Requirement already satisfied: fonttools>=4.22.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib) (4.49.0)\n","Requirement already satisfied: kiwisolver>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib) (1.4.5)\n","Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib) (23.2)\n","Requirement already satisfied: pillow>=6.2.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib) (9.4.0)\n","Requirement already satisfied: pyparsing>=2.3.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib) (3.1.1)\n","Requirement already satisfied: python-dateutil>=2.7 in /usr/local/lib/python3.10/dist-packages (from matplotlib) (2.8.2)\n","Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.10/dist-packages (from python-dateutil>=2.7->matplotlib) (1.16.0)\n"]}],"source":["! apt-get install iputils-ping\n","! pip install pythonping\n","! pip install numpy matplotlib"]},{"cell_type":"code","source":["import pandas as pd # To read & write csv files and use powerful dataframe features\n","import socket # To get IP addresses of hosts\n","\n","# To define get_information() function\n","import urllib.request # To open url of http://ip-api.com/json/\n","import json # To parse the result of the request\n","import time # To define a random waiting time to avoid \"Too many requests\" error\n","import random #  To define a random waiting time to avoid \"Too many requests\" error\n","\n","from pythonping import ping # For RTT measurement\n","from geopy.distance import geodesic #For distance calculation\n","from matplotlib import pyplot as plt # To plot\n","import numpy as np # To use polyfit and other calculations\n","\n"],"metadata":{"id":"Z4dik1rRJW7I","executionInfo":{"status":"ok","timestamp":1709501995511,"user_tz":-180,"elapsed":1044,"user":{"displayName":"Tuğrul Kök","userId":"16330606131935583069"}}},"execution_count":2,"outputs":[]},{"cell_type":"markdown","source":["### Reading Data & Pre-processing"],"metadata":{"id":"VPlDxq9aMxSe"}},{"cell_type":"markdown","source":["The hostnames.csv includes the all host names at https://www.debian.org/mirror/list. The csv file was created by using Microsoft Excel HTML import tool. The dataset includes 335 host names from many countries."],"metadata":{"id":"T2gtbNZLQWNe"}},{"cell_type":"code","source":["# This is the path for host names\n","file_path = 'drive/MyDrive/NMDA/data/hostnames.csv'\n","\n","# Reading the CSV file into a DataFrame\n","df = pd.read_csv(file_path)\n","\n","# Display the DataFrame\n","print(df)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"JdNr5azwN390","executionInfo":{"status":"ok","timestamp":1709502443789,"user_tz":-180,"elapsed":1024,"user":{"displayName":"Tuğrul Kök","userId":"16330606131935583069"}},"outputId":"7d8d83a2-e9bd-4b85-aa93-231b6a0f668e"},"execution_count":10,"outputs":[{"output_type":"stream","name":"stdout","text":["                               Host Name\n","0                   debian.unnoba.edu.ar\n","1                      ftp.am.debian.org\n","2                       mirrors.asnet.am\n","3                      ftp.au.debian.org\n","4    debian.mirror.digitalpacific.com.au\n","..                                   ...\n","330          plug-mirror.rcac.purdue.edu\n","331                   repo.ialab.dsu.edu\n","332              debian.repo.cure.edu.uy\n","333                mirror.bizflycloud.vn\n","334                      mirrors.bkns.vn\n","\n","[335 rows x 1 columns]\n"]}]},{"cell_type":"markdown","source":["In this part, socket is used to get the IP addresses of the hosts. The IP addresses were found because the geographic location of the hosts can be queried by their IP addresses. No error message were received. All the IP addresses were found successfully Running next cell can be skipped and loading the output can be read from \"hostname_ip.csv\""],"metadata":{"id":"1jJ1it1qSk_9"}},{"cell_type":"code","source":["# Defining a function to get IP address based on hostname using socket\n","def get_ip_address(hostname):\n","    try:\n","        ip_address = socket.gethostbyname(hostname)\n","        return ip_address\n","    except socket.error as e:\n","        print(f\"Error: {e}\")\n","        return 'Unknown'\n","\n","# Creating a new column 'ip_addr' by applying the 'get_ip_address' function to the 'hostnames' column\n","df['IP Address'] = df['Host Name'].apply(get_ip_address)\n","\n","# Displaying the updated DataFrame\n","print(df)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"1uWZDZegRMOe","executionInfo":{"status":"ok","timestamp":1709502677668,"user_tz":-180,"elapsed":63649,"user":{"displayName":"Tuğrul Kök","userId":"16330606131935583069"}},"outputId":"daa9ca4b-6d6d-4d96-f487-474b7d9a796c"},"execution_count":11,"outputs":[{"output_type":"stream","name":"stdout","text":["                               Host Name       IP Address\n","0                   debian.unnoba.edu.ar     200.14.116.3\n","1                      ftp.am.debian.org   93.187.162.100\n","2                       mirrors.asnet.am   93.187.162.100\n","3                      ftp.au.debian.org    103.84.224.37\n","4    debian.mirror.digitalpacific.com.au     101.0.120.90\n","..                                   ...              ...\n","330          plug-mirror.rcac.purdue.edu  128.211.151.252\n","331                   repo.ialab.dsu.edu  138.247.115.248\n","332              debian.repo.cure.edu.uy     164.73.233.2\n","333                mirror.bizflycloud.vn  103.107.181.186\n","334                      mirrors.bkns.vn   103.121.88.254\n","\n","[335 rows x 2 columns]\n"]}]},{"cell_type":"code","source":["# This cell is to skip running previous cell\n","# df.to_csv('drive/MyDrive/NMDA/data/hostname_ip.csv', index=False)\n","df = pd.read_csv('drive/MyDrive/NMDA/data/hostname_ip.csv')"],"metadata":{"id":"hJ5UjpMyTQe8","executionInfo":{"status":"ok","timestamp":1709502803570,"user_tz":-180,"elapsed":286,"user":{"displayName":"Tuğrul Kök","userId":"16330606131935583069"}}},"execution_count":13,"outputs":[]},{"cell_type":"markdown","source":["In this part, IP addresses were used to query geographic information about hosts. The latitude and longitude were captured to calculate distances. The country and city information were kept for concluding additional information.\n","\n","ip-api gives \"Too many requests\" error when the all IP addresses are queried. Therefore, a random waiting time is added to function, which makes long waiting time, however, it is needed to use ip-api\n","\n","Avoiding to run the next cell is suggested because it approximately lasts 16 minutes. The output csv file can be loaded from \"hosts_with_location.csv\" in the next cell"],"metadata":{"id":"40vCUtQET_gb"}},{"cell_type":"code","source":["# Define a function to get IP address based on hostname using socket\n","def get_information(ip):\n","        delay =  random.randint(1, 5)\n","        info = json.loads(urllib.request.urlopen('http://ip-api.com/json/'+ip).read())\n","        time.sleep(delay)\n","        country = info['country']\n","        city = info['city']\n","        latitude = info['lat']\n","        longitude = info['lon']\n","\n","\n","        return country, city, latitude, longitude\n","\n","\n","df[['Country', 'City', 'Latitude', 'Longitude']] = df['IP Address'].apply(lambda x: pd.Series(get_information(x)))\n","#print(get_information(df.iloc[0][1]))\n","df.head(10)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":359},"id":"JDZuFgRRS1wa","executionInfo":{"status":"ok","timestamp":1709503915070,"user_tz":-180,"elapsed":988233,"user":{"displayName":"Tuğrul Kök","userId":"16330606131935583069"}},"outputId":"2cf36dec-acb5-4f46-886e-284ffc7bb2f6"},"execution_count":14,"outputs":[{"output_type":"execute_result","data":{"text/plain":["                             Host Name       IP Address    Country      City  \\\n","0                 debian.unnoba.edu.ar     200.14.116.3  Argentina     Junín   \n","1                    ftp.am.debian.org   93.187.162.100    Armenia   Yerevan   \n","2                     mirrors.asnet.am   93.187.162.100    Armenia   Yerevan   \n","3                    ftp.au.debian.org    103.84.224.37  Australia    Sydney   \n","4  debian.mirror.digitalpacific.com.au     101.0.120.90  Australia    Sydney   \n","5                 mirror.aarnet.edu.au  202.158.214.106  Australia  Canberra   \n","6                  mirror.amaze.com.au     122.252.2.42  Australia    Sydney   \n","7                       mirror.gsl.icu     103.1.215.35  Australia    Sydney   \n","8                  mirror.linux.org.au    103.84.224.37  Australia    Sydney   \n","9            mirror.overthewire.com.au    139.5.127.195  Australia  Brisbane   \n","\n","   Latitude  Longitude  \n","0  -34.5768   -60.9470  \n","1   40.2047    44.5398  \n","2   40.2047    44.5398  \n","3  -33.8688   151.2090  \n","4  -33.8688   151.2090  \n","5  -35.2298   149.1060  \n","6  -34.0576   151.0067  \n","7  -33.8715   151.2006  \n","8  -33.8688   151.2090  \n","9  -27.4669   153.0397  "],"text/html":["\n","  <div id=\"df-4e78430d-491c-49d3-a076-865b30fbc0ff\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Host Name</th>\n","      <th>IP Address</th>\n","      <th>Country</th>\n","      <th>City</th>\n","      <th>Latitude</th>\n","      <th>Longitude</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>debian.unnoba.edu.ar</td>\n","      <td>200.14.116.3</td>\n","      <td>Argentina</td>\n","      <td>Junín</td>\n","      <td>-34.5768</td>\n","      <td>-60.9470</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>ftp.am.debian.org</td>\n","      <td>93.187.162.100</td>\n","      <td>Armenia</td>\n","      <td>Yerevan</td>\n","      <td>40.2047</td>\n","      <td>44.5398</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>mirrors.asnet.am</td>\n","      <td>93.187.162.100</td>\n","      <td>Armenia</td>\n","      <td>Yerevan</td>\n","      <td>40.2047</td>\n","      <td>44.5398</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>ftp.au.debian.org</td>\n","      <td>103.84.224.37</td>\n","      <td>Australia</td>\n","      <td>Sydney</td>\n","      <td>-33.8688</td>\n","      <td>151.2090</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>debian.mirror.digitalpacific.com.au</td>\n","      <td>101.0.120.90</td>\n","      <td>Australia</td>\n","      <td>Sydney</td>\n","      <td>-33.8688</td>\n","      <td>151.2090</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>mirror.aarnet.edu.au</td>\n","      <td>202.158.214.106</td>\n","      <td>Australia</td>\n","      <td>Canberra</td>\n","      <td>-35.2298</td>\n","      <td>149.1060</td>\n","    </tr>\n","    <tr>\n","      <th>6</th>\n","      <td>mirror.amaze.com.au</td>\n","      <td>122.252.2.42</td>\n","      <td>Australia</td>\n","      <td>Sydney</td>\n","      <td>-34.0576</td>\n","      <td>151.0067</td>\n","    </tr>\n","    <tr>\n","      <th>7</th>\n","      <td>mirror.gsl.icu</td>\n","      <td>103.1.215.35</td>\n","      <td>Australia</td>\n","      <td>Sydney</td>\n","      <td>-33.8715</td>\n","      <td>151.2006</td>\n","    </tr>\n","    <tr>\n","      <th>8</th>\n","      <td>mirror.linux.org.au</td>\n","      <td>103.84.224.37</td>\n","      <td>Australia</td>\n","      <td>Sydney</td>\n","      <td>-33.8688</td>\n","      <td>151.2090</td>\n","    </tr>\n","    <tr>\n","      <th>9</th>\n","      <td>mirror.overthewire.com.au</td>\n","      <td>139.5.127.195</td>\n","      <td>Australia</td>\n","      <td>Brisbane</td>\n","      <td>-27.4669</td>\n","      <td>153.0397</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-4e78430d-491c-49d3-a076-865b30fbc0ff')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-4e78430d-491c-49d3-a076-865b30fbc0ff button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-4e78430d-491c-49d3-a076-865b30fbc0ff');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-a3123a46-9e54-4a9c-8628-eda8b63e0b19\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-a3123a46-9e54-4a9c-8628-eda8b63e0b19')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-a3123a46-9e54-4a9c-8628-eda8b63e0b19 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df","summary":"{\n  \"name\": \"df\",\n  \"rows\": 335,\n  \"fields\": [\n    {\n      \"column\": \"Host Name\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 335,\n        \"samples\": [\n          \"ftp.br.debian.org\",\n          \"debian.inf.tu-dresden.de\",\n          \"mirrors.nic.cz\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"IP Address\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 299,\n        \"samples\": [\n          \"184.105.240.111\",\n          \"81.179.123.56\",\n          \"83.171.20.4\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Country\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 63,\n        \"samples\": [\n          \"Uruguay\",\n          \"Thailand\",\n          \"Argentina\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"City\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 212,\n        \"samples\": [\n          \"Nanjing\",\n          \"Cankaya\",\n          \"St Petersburg\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Latitude\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 24.231695426882514,\n        \"min\": -45.8825,\n        \"max\": 64.1514,\n        \"num_unique_values\": 273,\n        \"samples\": [\n          45.4986,\n          38.0729,\n          48.8528\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Longitude\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 63.65152694321624,\n        \"min\": -123.1924,\n        \"max\": 174.7932,\n        \"num_unique_values\": 275,\n        \"samples\": [\n          -79.3961,\n          139.768,\n          28.1874\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":14}]},{"cell_type":"code","source":["#df.to_csv('drive/MyDrive/NMDA/data/hosts_with_location.csv', index=False)\n","df = pd.read_csv('drive/MyDrive/NMDA/data/hosts_with_location.csv')\n"],"metadata":{"id":"5h-fEScCQkqj","executionInfo":{"status":"ok","timestamp":1709503983700,"user_tz":-180,"elapsed":323,"user":{"displayName":"Tuğrul Kök","userId":"16330606131935583069"}}},"execution_count":15,"outputs":[]},{"cell_type":"markdown","source":["### Measuring RTT and Calculating Distances"],"metadata":{"id":"q0BY2uq-M6It"}},{"cell_type":"markdown","source":["Now the data is ready for measuring RTT and calculating distances. First, We retrieve our information here. Since Google Colab is used, the server and the location may be changed in different runtime sessions."],"metadata":{"id":"z2PlTRZ0YdQa"}},{"cell_type":"code","source":["api='https://api.ipify.org'\n","my_ip = urllib.request.urlopen(api).read().decode('UTF-8')\n","my_country, my_city, my_latitude, my_longitude =  get_information(my_ip)\n","my_ip, my_country, my_city, my_latitude, my_longitude\n","# My info is ('35.231.19.59', 'United States', 'North Charleston', 32.8771, -80.013)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"IJZld5dnSghz","executionInfo":{"status":"ok","timestamp":1709504028185,"user_tz":-180,"elapsed":2391,"user":{"displayName":"Tuğrul Kök","userId":"16330606131935583069"}},"outputId":"f8df1fb0-ad2c-4f4d-8d05-fe0a45f0b506"},"execution_count":18,"outputs":[{"output_type":"execute_result","data":{"text/plain":["('35.231.19.59', 'United States', 'North Charleston', 32.8771, -80.013)"]},"metadata":{},"execution_count":18}]},{"cell_type":"code","source":["def get_RTT(ip):\n","  resp = ping(target=ip, count=3)\n","  return resp.rtt_avg*1000\n","\n","df['RTT'] = df['IP Address'].apply(get_RTT)\n","df.head(10)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":359},"id":"NgZBh1XzVlS6","executionInfo":{"status":"ok","timestamp":1709504582705,"user_tz":-180,"elapsed":370300,"user":{"displayName":"Tuğrul Kök","userId":"16330606131935583069"}},"outputId":"e66f9ae9-00af-4b8a-9a07-7ad26a4d0207"},"execution_count":20,"outputs":[{"output_type":"execute_result","data":{"text/plain":["                             Host Name       IP Address    Country      City  \\\n","0                 debian.unnoba.edu.ar     200.14.116.3  Argentina     Junín   \n","1                    ftp.am.debian.org   93.187.162.100    Armenia   Yerevan   \n","2                     mirrors.asnet.am   93.187.162.100    Armenia   Yerevan   \n","3                    ftp.au.debian.org    103.84.224.37  Australia    Sydney   \n","4  debian.mirror.digitalpacific.com.au     101.0.120.90  Australia    Sydney   \n","5                 mirror.aarnet.edu.au  202.158.214.106  Australia  Canberra   \n","6                  mirror.amaze.com.au     122.252.2.42  Australia    Sydney   \n","7                       mirror.gsl.icu     103.1.215.35  Australia    Sydney   \n","8                  mirror.linux.org.au    103.84.224.37  Australia    Sydney   \n","9            mirror.overthewire.com.au    139.5.127.195  Australia  Brisbane   \n","\n","   Latitude  Longitude         RTT  \n","0  -34.5768   -60.9470  130.550638  \n","1   40.2047    44.5398  151.492923  \n","2   40.2047    44.5398  150.440412  \n","3  -33.8688   151.2090  200.599116  \n","4  -33.8688   151.2090  196.029141  \n","5  -35.2298   149.1060  208.291632  \n","6  -34.0576   151.0067  196.287551  \n","7  -33.8715   151.2006  197.709332  \n","8  -33.8688   151.2090  200.248172  \n","9  -27.4669   153.0397  209.061141  "],"text/html":["\n","  <div id=\"df-a3d9447b-a0e6-472d-98f9-266e63d5c5e1\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Host Name</th>\n","      <th>IP Address</th>\n","      <th>Country</th>\n","      <th>City</th>\n","      <th>Latitude</th>\n","      <th>Longitude</th>\n","      <th>RTT</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>debian.unnoba.edu.ar</td>\n","      <td>200.14.116.3</td>\n","      <td>Argentina</td>\n","      <td>Junín</td>\n","      <td>-34.5768</td>\n","      <td>-60.9470</td>\n","      <td>130.550638</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>ftp.am.debian.org</td>\n","      <td>93.187.162.100</td>\n","      <td>Armenia</td>\n","      <td>Yerevan</td>\n","      <td>40.2047</td>\n","      <td>44.5398</td>\n","      <td>151.492923</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>mirrors.asnet.am</td>\n","      <td>93.187.162.100</td>\n","      <td>Armenia</td>\n","      <td>Yerevan</td>\n","      <td>40.2047</td>\n","      <td>44.5398</td>\n","      <td>150.440412</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>ftp.au.debian.org</td>\n","      <td>103.84.224.37</td>\n","      <td>Australia</td>\n","      <td>Sydney</td>\n","      <td>-33.8688</td>\n","      <td>151.2090</td>\n","      <td>200.599116</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>debian.mirror.digitalpacific.com.au</td>\n","      <td>101.0.120.90</td>\n","      <td>Australia</td>\n","      <td>Sydney</td>\n","      <td>-33.8688</td>\n","      <td>151.2090</td>\n","      <td>196.029141</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>mirror.aarnet.edu.au</td>\n","      <td>202.158.214.106</td>\n","      <td>Australia</td>\n","      <td>Canberra</td>\n","      <td>-35.2298</td>\n","      <td>149.1060</td>\n","      <td>208.291632</td>\n","    </tr>\n","    <tr>\n","      <th>6</th>\n","      <td>mirror.amaze.com.au</td>\n","      <td>122.252.2.42</td>\n","      <td>Australia</td>\n","      <td>Sydney</td>\n","      <td>-34.0576</td>\n","      <td>151.0067</td>\n","      <td>196.287551</td>\n","    </tr>\n","    <tr>\n","      <th>7</th>\n","      <td>mirror.gsl.icu</td>\n","      <td>103.1.215.35</td>\n","      <td>Australia</td>\n","      <td>Sydney</td>\n","      <td>-33.8715</td>\n","      <td>151.2006</td>\n","      <td>197.709332</td>\n","    </tr>\n","    <tr>\n","      <th>8</th>\n","      <td>mirror.linux.org.au</td>\n","      <td>103.84.224.37</td>\n","      <td>Australia</td>\n","      <td>Sydney</td>\n","      <td>-33.8688</td>\n","      <td>151.2090</td>\n","      <td>200.248172</td>\n","    </tr>\n","    <tr>\n","      <th>9</th>\n","      <td>mirror.overthewire.com.au</td>\n","      <td>139.5.127.195</td>\n","      <td>Australia</td>\n","      <td>Brisbane</td>\n","      <td>-27.4669</td>\n","      <td>153.0397</td>\n","      <td>209.061141</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-a3d9447b-a0e6-472d-98f9-266e63d5c5e1')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-a3d9447b-a0e6-472d-98f9-266e63d5c5e1 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-a3d9447b-a0e6-472d-98f9-266e63d5c5e1');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-47549660-2a87-4706-b6c1-1d4707935c4e\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-47549660-2a87-4706-b6c1-1d4707935c4e')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-47549660-2a87-4706-b6c1-1d4707935c4e button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df","summary":"{\n  \"name\": \"df\",\n  \"rows\": 335,\n  \"fields\": [\n    {\n      \"column\": \"Host Name\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 335,\n        \"samples\": [\n          \"ftp.br.debian.org\",\n          \"debian.inf.tu-dresden.de\",\n          \"mirrors.nic.cz\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"IP Address\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 299,\n        \"samples\": [\n          \"184.105.240.111\",\n          \"81.179.123.56\",\n          \"83.171.20.4\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Country\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 63,\n        \"samples\": [\n          \"Uruguay\",\n          \"Thailand\",\n          \"Argentina\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"City\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 212,\n        \"samples\": [\n          \"Nanjing\",\n          \"Cankaya\",\n          \"St Petersburg\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Latitude\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 24.231695426882514,\n        \"min\": -45.8825,\n        \"max\": 64.1514,\n        \"num_unique_values\": 273,\n        \"samples\": [\n          45.4986,\n          38.0729,\n          48.8528\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Longitude\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 63.65152694321624,\n        \"min\": -123.1924,\n        \"max\": 174.7932,\n        \"num_unique_values\": 275,\n        \"samples\": [\n          -79.3961,\n          139.768,\n          28.1874\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"RTT\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 631.7157445889364,\n        \"min\": 10.736558333216331,\n        \"max\": 2000.0,\n        \"num_unique_values\": 293,\n        \"samples\": [\n          105.41086566657516,\n          87.3785353336037,\n          263.4990696665227\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":20}]},{"cell_type":"code","source":["df.to_csv('drive/MyDrive/NMDA/data/hosts_with_RTT.csv', index=False)\n","df = pd.read_csv('drive/MyDrive/NMDA/data/hosts_with_RTT.csv')\n"],"metadata":{"id":"7OgfDIW4YLpQ","executionInfo":{"status":"ok","timestamp":1709504582705,"user_tz":-180,"elapsed":7,"user":{"displayName":"Tuğrul Kök","userId":"16330606131935583069"}}},"execution_count":21,"outputs":[]},{"cell_type":"code","source":["# Remove rows with RTT value higher than 1999 because 2000 ms response time means timeout\n","df = df[df['RTT'] <= 1999]\n"],"metadata":{"id":"6fJysM4Cg3RI","executionInfo":{"status":"ok","timestamp":1709504582705,"user_tz":-180,"elapsed":3,"user":{"displayName":"Tuğrul Kök","userId":"16330606131935583069"}}},"execution_count":22,"outputs":[]},{"cell_type":"code","source":["# Function to calculate distance using Haversine formula\n","def haversine_distance(lat1, lon1, lat2, lon2):\n","    coords_1 = (lat1, lon1)\n","    coords_2 = (lat2, lon2)\n","    return geodesic(coords_1, coords_2).kilometers\n","\n","# Calculate distances and add a new column to the DataFrame\n","df['Distance'] = df.apply(lambda row: haversine_distance(my_latitude, my_longitude, row['Latitude'], row['Longitude']), axis=1)\n","df.head(10)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":379},"id":"eXh4mE24ZtP9","executionInfo":{"status":"ok","timestamp":1709504583217,"user_tz":-180,"elapsed":515,"user":{"displayName":"Tuğrul Kök","userId":"16330606131935583069"}},"outputId":"64e1215c-e06f-4edb-c268-31b0330205e8"},"execution_count":23,"outputs":[{"output_type":"execute_result","data":{"text/plain":["                             Host Name       IP Address    Country      City  \\\n","0                 debian.unnoba.edu.ar     200.14.116.3  Argentina     Junín   \n","1                    ftp.am.debian.org   93.187.162.100    Armenia   Yerevan   \n","2                     mirrors.asnet.am   93.187.162.100    Armenia   Yerevan   \n","3                    ftp.au.debian.org    103.84.224.37  Australia    Sydney   \n","4  debian.mirror.digitalpacific.com.au     101.0.120.90  Australia    Sydney   \n","5                 mirror.aarnet.edu.au  202.158.214.106  Australia  Canberra   \n","6                  mirror.amaze.com.au     122.252.2.42  Australia    Sydney   \n","7                       mirror.gsl.icu     103.1.215.35  Australia    Sydney   \n","8                  mirror.linux.org.au    103.84.224.37  Australia    Sydney   \n","9            mirror.overthewire.com.au    139.5.127.195  Australia  Brisbane   \n","\n","   Latitude  Longitude         RTT      Distance  \n","0  -34.5768   -60.9470  130.550638   7728.197555  \n","1   40.2047    44.5398  151.492923  10114.653397  \n","2   40.2047    44.5398  150.440412  10114.653397  \n","3  -33.8688   151.2090  200.599116  15308.794837  \n","4  -33.8688   151.2090  196.029141  15308.794837  \n","5  -35.2298   149.1060  208.291632  15529.432414  \n","6  -34.0576   151.0067  196.287551  15331.791309  \n","7  -33.8715   151.2006  197.709332  15309.620241  \n","8  -33.8688   151.2090  200.248172  15308.794837  \n","9  -27.4669   153.0397  209.061141  14934.806339  "],"text/html":["\n","  <div id=\"df-1814d4e7-2d53-4a74-a9ea-4556eefea4f4\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Host Name</th>\n","      <th>IP Address</th>\n","      <th>Country</th>\n","      <th>City</th>\n","      <th>Latitude</th>\n","      <th>Longitude</th>\n","      <th>RTT</th>\n","      <th>Distance</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>debian.unnoba.edu.ar</td>\n","      <td>200.14.116.3</td>\n","      <td>Argentina</td>\n","      <td>Junín</td>\n","      <td>-34.5768</td>\n","      <td>-60.9470</td>\n","      <td>130.550638</td>\n","      <td>7728.197555</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>ftp.am.debian.org</td>\n","      <td>93.187.162.100</td>\n","      <td>Armenia</td>\n","      <td>Yerevan</td>\n","      <td>40.2047</td>\n","      <td>44.5398</td>\n","      <td>151.492923</td>\n","      <td>10114.653397</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>mirrors.asnet.am</td>\n","      <td>93.187.162.100</td>\n","      <td>Armenia</td>\n","      <td>Yerevan</td>\n","      <td>40.2047</td>\n","      <td>44.5398</td>\n","      <td>150.440412</td>\n","      <td>10114.653397</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>ftp.au.debian.org</td>\n","      <td>103.84.224.37</td>\n","      <td>Australia</td>\n","      <td>Sydney</td>\n","      <td>-33.8688</td>\n","      <td>151.2090</td>\n","      <td>200.599116</td>\n","      <td>15308.794837</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>debian.mirror.digitalpacific.com.au</td>\n","      <td>101.0.120.90</td>\n","      <td>Australia</td>\n","      <td>Sydney</td>\n","      <td>-33.8688</td>\n","      <td>151.2090</td>\n","      <td>196.029141</td>\n","      <td>15308.794837</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>mirror.aarnet.edu.au</td>\n","      <td>202.158.214.106</td>\n","      <td>Australia</td>\n","      <td>Canberra</td>\n","      <td>-35.2298</td>\n","      <td>149.1060</td>\n","      <td>208.291632</td>\n","      <td>15529.432414</td>\n","    </tr>\n","    <tr>\n","      <th>6</th>\n","      <td>mirror.amaze.com.au</td>\n","      <td>122.252.2.42</td>\n","      <td>Australia</td>\n","      <td>Sydney</td>\n","      <td>-34.0576</td>\n","      <td>151.0067</td>\n","      <td>196.287551</td>\n","      <td>15331.791309</td>\n","    </tr>\n","    <tr>\n","      <th>7</th>\n","      <td>mirror.gsl.icu</td>\n","      <td>103.1.215.35</td>\n","      <td>Australia</td>\n","      <td>Sydney</td>\n","      <td>-33.8715</td>\n","      <td>151.2006</td>\n","      <td>197.709332</td>\n","      <td>15309.620241</td>\n","    </tr>\n","    <tr>\n","      <th>8</th>\n","      <td>mirror.linux.org.au</td>\n","      <td>103.84.224.37</td>\n","      <td>Australia</td>\n","      <td>Sydney</td>\n","      <td>-33.8688</td>\n","      <td>151.2090</td>\n","      <td>200.248172</td>\n","      <td>15308.794837</td>\n","    </tr>\n","    <tr>\n","      <th>9</th>\n","      <td>mirror.overthewire.com.au</td>\n","      <td>139.5.127.195</td>\n","      <td>Australia</td>\n","      <td>Brisbane</td>\n","      <td>-27.4669</td>\n","      <td>153.0397</td>\n","      <td>209.061141</td>\n","      <td>14934.806339</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-1814d4e7-2d53-4a74-a9ea-4556eefea4f4')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-1814d4e7-2d53-4a74-a9ea-4556eefea4f4 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-1814d4e7-2d53-4a74-a9ea-4556eefea4f4');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-be376df1-9189-44fe-9773-a827f79d122f\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-be376df1-9189-44fe-9773-a827f79d122f')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-be376df1-9189-44fe-9773-a827f79d122f button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df","summary":"{\n  \"name\": \"df\",\n  \"rows\": 292,\n  \"fields\": [\n    {\n      \"column\": \"Host Name\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 292,\n        \"samples\": [\n          \"ftp.ec-m.fr\",\n          \"mirrorservice.org\",\n          \"mirror.nyist.edu.cn\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"IP Address\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 260,\n        \"samples\": [\n          \"129.97.134.71\",\n          \"45.157.140.21\",\n          \"90.207.225.196\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Country\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 58,\n        \"samples\": [\n          \"Argentina\",\n          \"Brazil\",\n          \"South Korea\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"City\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 184,\n        \"samples\": [\n          \"Kanata\",\n          \"H\\u00f8rsholm\",\n          \"Oxford\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Latitude\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 24.602547763437872,\n        \"min\": -45.8825,\n        \"max\": 64.1514,\n        \"num_unique_values\": 242,\n        \"samples\": [\n          45.5017,\n          -27.4669,\n          50.045\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Longitude\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 63.83544783847281,\n        \"min\": -123.1924,\n        \"max\": 174.7932,\n        \"num_unique_values\": 244,\n        \"samples\": [\n          -87.6288,\n          153.0397,\n          18.6297\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"RTT\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 79.0956057320524,\n        \"min\": 10.736558333216331,\n        \"max\": 848.0510073333486,\n        \"num_unique_values\": 292,\n        \"samples\": [\n          99.91747899994152,\n          89.41397233320458,\n          252.23179400002965\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Distance\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3414.9474164985354,\n        \"min\": 418.5962267506188,\n        \"max\": 16972.018893210472,\n        \"num_unique_values\": 244,\n        \"samples\": [\n          1201.573857956455,\n          14934.80633882959,\n          7626.348392508696\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":23}]},{"source":["# @title RTT vs Distance\n","\n","df.plot(kind='scatter', x='Distance', y='RTT', s=32, alpha=.8)\n","plt.gca().spines[['top', 'right',]].set_visible(False)"],"cell_type":"code","execution_count":24,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":449},"id":"B2enfeIeguDg","executionInfo":{"status":"ok","timestamp":1709504583217,"user_tz":-180,"elapsed":9,"user":{"displayName":"Tuğrul Kök","userId":"16330606131935583069"}},"outputId":"0cb2aa1c-5bdd-4433-d45b-1495bde1937a"}},{"cell_type":"code","source":["df.describe()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":297},"id":"vu-tH7sZi_Wq","executionInfo":{"status":"ok","timestamp":1709504583217,"user_tz":-180,"elapsed":6,"user":{"displayName":"Tuğrul Kök","userId":"16330606131935583069"}},"outputId":"22a167d3-2b68-4221-f9dd-282de0310ab9"},"execution_count":25,"outputs":[{"output_type":"execute_result","data":{"text/plain":["         Latitude   Longitude         RTT      Distance\n","count  292.000000  292.000000  292.000000    292.000000\n","mean    37.999080   18.397649  127.140043   7948.543984\n","std     24.602548   63.835448   79.095606   3414.947416\n","min    -45.882500 -123.192400   10.736558    418.596227\n","25%     38.862425    2.277197   97.857003   6868.534689\n","50%     47.244550   12.340150  111.037123   7369.871780\n","75%     51.115650   28.039050  129.903040   8575.873016\n","max     64.151400  174.793200  848.051007  16972.018893"],"text/html":["\n","  <div id=\"df-a436eb55-acc6-47fd-9f2f-6476511f2e93\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Latitude</th>\n","      <th>Longitude</th>\n","      <th>RTT</th>\n","      <th>Distance</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>count</th>\n","      <td>292.000000</td>\n","      <td>292.000000</td>\n","      <td>292.000000</td>\n","      <td>292.000000</td>\n","    </tr>\n","    <tr>\n","      <th>mean</th>\n","      <td>37.999080</td>\n","      <td>18.397649</td>\n","      <td>127.140043</td>\n","      <td>7948.543984</td>\n","    </tr>\n","    <tr>\n","      <th>std</th>\n","      <td>24.602548</td>\n","      <td>63.835448</td>\n","      <td>79.095606</td>\n","      <td>3414.947416</td>\n","    </tr>\n","    <tr>\n","      <th>min</th>\n","      <td>-45.882500</td>\n","      <td>-123.192400</td>\n","      <td>10.736558</td>\n","      <td>418.596227</td>\n","    </tr>\n","    <tr>\n","      <th>25%</th>\n","      <td>38.862425</td>\n","      <td>2.277197</td>\n","      <td>97.857003</td>\n","      <td>6868.534689</td>\n","    </tr>\n","    <tr>\n","      <th>50%</th>\n","      <td>47.244550</td>\n","      <td>12.340150</td>\n","      <td>111.037123</td>\n","      <td>7369.871780</td>\n","    </tr>\n","    <tr>\n","      <th>75%</th>\n","      <td>51.115650</td>\n","      <td>28.039050</td>\n","      <td>129.903040</td>\n","      <td>8575.873016</td>\n","    </tr>\n","    <tr>\n","      <th>max</th>\n","      <td>64.151400</td>\n","      <td>174.793200</td>\n","      <td>848.051007</td>\n","      <td>16972.018893</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-a436eb55-acc6-47fd-9f2f-6476511f2e93')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-a436eb55-acc6-47fd-9f2f-6476511f2e93 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-a436eb55-acc6-47fd-9f2f-6476511f2e93');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-6f134344-dac3-4fc1-b382-6c330622077e\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-6f134344-dac3-4fc1-b382-6c330622077e')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-6f134344-dac3-4fc1-b382-6c330622077e button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"df\",\n  \"rows\": 8,\n  \"fields\": [\n    {\n      \"column\": \"Latitude\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 98.09950384458543,\n        \"min\": -45.8825,\n        \"max\": 292.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          37.99907957534246,\n          47.244550000000004,\n          292.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Longitude\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 124.73670949734141,\n        \"min\": -123.1924,\n        \"max\": 292.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          18.397648615410958,\n          12.340150000000001,\n          292.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"RTT\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 268.93830421823134,\n        \"min\": 10.736558333216331,\n        \"max\": 848.0510073333486,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          127.14004260046032,\n          111.03712300003585,\n          292.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Distance\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5371.898462897249,\n        \"min\": 292.0,\n        \"max\": 16972.018893210472,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          7948.543983981083,\n          7369.871780201826,\n          292.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":25}]},{"cell_type":"code","source":["# Find the index of the row with the minimum RTT\n","min_rtt_index = df['RTT'].idxmin()\n","# Extract the row with the minimum RTT\n","row_with_min_rtt = df.loc[min_rtt_index]\n","\n","# Find the index of the row with the minimum Distance\n","min_distance_index = df['Distance'].idxmin()\n","# Extract the row with the minimum Distance\n","row_with_min_distance = df.loc[min_distance_index]\n","\n","# Find the index of the row with the maximum RTT\n","max_rtt_index = df['RTT'].idxmax()\n","# Extract the row with the maximum RTT\n","row_with_max_rtt = df.loc[max_rtt_index]\n","\n","# Find the index of the row with the maximum Distance\n","max_distance_index = df['Distance'].idxmax()\n","# Extract the row with the maximum Distance\n","row_with_max_distance = df.loc[max_distance_index]\n","\n","# Print the results\n","print(\"Row with minimum RTT:\")\n","print(row_with_min_rtt)\n","\n","print(\"\\nRow with minimum Distance:\")\n","print(row_with_min_distance)\n","\n","print(\"\\nRow with maximum RTT:\")\n","print(row_with_max_rtt)\n","\n","print(\"\\nRow with maximum Distance:\")\n","print(row_with_max_distance)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"B4R9zUU8jZTC","executionInfo":{"status":"ok","timestamp":1709504583572,"user_tz":-180,"elapsed":360,"user":{"displayName":"Tuğrul Kök","userId":"16330606131935583069"}},"outputId":"e718eb02-ab93-4a45-acae-aa39fd710ad3"},"execution_count":26,"outputs":[{"output_type":"stream","name":"stdout","text":["Row with minimum RTT:\n","Host Name     atl.mirrors.clouvider.net\n","IP Address                92.119.16.152\n","Country                   United States\n","City                            Atlanta\n","Latitude                        33.7485\n","Longitude                      -84.3871\n","RTT                           10.736558\n","Distance                     418.596227\n","Name: 303, dtype: object\n","\n","Row with minimum Distance:\n","Host Name     atl.mirrors.clouvider.net\n","IP Address                92.119.16.152\n","Country                   United States\n","City                            Atlanta\n","Latitude                        33.7485\n","Longitude                      -84.3871\n","RTT                           10.736558\n","Distance                     418.596227\n","Name: 303, dtype: object\n","\n","Row with maximum RTT:\n","Host Name     mirrors.huaweicloud.com\n","IP Address             124.70.125.167\n","Country                         China\n","City                          Beijing\n","Latitude                      39.9042\n","Longitude                    116.4073\n","RTT                        848.051007\n","Distance                 11771.317172\n","Name: 54, dtype: object\n","\n","Row with maximum Distance:\n","Host Name          mr.heru.id\n","IP Address    103.155.117.110\n","Country             Indonesia\n","City                   Bekasi\n","Latitude             -6.26177\n","Longitude             106.942\n","RTT                229.367949\n","Distance         16972.018893\n","Name: 153, dtype: object\n"]}]},{"cell_type":"markdown","source":["### Approximation for RTT"],"metadata":{"id":"rt_64QgYPhMQ"}},{"cell_type":"code","source":["\n","# Fit a linear function using numpy.polyfit\n","coefficients = np.polyfit(df['Distance'], df['RTT'], deg=1)\n","\n","# Extract the slope and intercept from the coefficients\n","slope, intercept = coefficients\n","\n","# Print the slope (average RTT per km)\n","print(\"Average RTT (ms) per km:\", slope)\n","\n","# Plot the original data and the fitted linear function (optional)\n","plt.scatter(df['Distance'], df['RTT'], label='Original Data')\n","plt.plot(df['Distance'], slope * df['Distance'] + intercept, color='red', label='Fitted Line')\n","plt.xlabel('Distance (km)')\n","plt.ylabel('RTT (ms)')\n","plt.legend()\n","plt.show()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":466},"id":"bjuaS7pKC3ji","executionInfo":{"status":"ok","timestamp":1709499990905,"user_tz":-180,"elapsed":836,"user":{"displayName":"Tuğrul Kök","userId":"16330606131935583069"}},"outputId":"735717bc-b501-4055-9994-c66406269b62"},"execution_count":112,"outputs":[{"output_type":"stream","name":"stdout","text":["Average RTT per km: 0.014890105987342646\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]}]}